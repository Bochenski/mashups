
/* line 1 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */



/* line 11 "js/lib/gherkin/lexer/pl.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

const _lexer_key_offsets = [
	0, 0, 20, 39, 40, 41, 43, 45, 
	50, 55, 60, 65, 69, 73, 75, 76, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 93, 
	95, 100, 107, 112, 113, 114, 115, 116, 
	118, 119, 120, 121, 122, 123, 124, 125, 
	126, 127, 128, 129, 130, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 140, 141, 
	148, 150, 152, 154, 156, 158, 160, 162, 
	164, 166, 168, 170, 172, 174, 176, 195, 
	197, 198, 199, 200, 201, 202, 203, 204, 
	205, 206, 207, 208, 224, 226, 228, 230, 
	232, 234, 236, 238, 240, 242, 244, 246, 
	248, 250, 252, 254, 256, 258, 260, 262, 
	265, 267, 269, 271, 273, 275, 277, 279, 
	281, 283, 285, 287, 290, 292, 294, 296, 
	298, 300, 302, 304, 306, 308, 310, 312, 
	314, 316, 318, 320, 322, 324, 326, 328, 
	330, 332, 334, 336, 338, 340, 342, 345, 
	347, 349, 351, 353, 355, 357, 359, 361, 
	363, 365, 367, 369, 371, 373, 375, 377, 
	380, 382, 384, 386, 388, 390, 392, 394, 
	396, 398, 400, 402, 403, 404, 405, 406, 
	407, 408, 409, 410, 411, 412, 413, 414, 
	415, 416, 417, 418, 419, 420, 421, 422, 
	438, 440, 442, 444, 446, 448, 450, 452, 
	454, 456, 458, 460, 462, 464, 466, 468, 
	470, 472, 474, 476, 479, 481, 483, 485, 
	487, 489, 491, 493, 495, 497, 499, 501, 
	503, 505, 507, 509, 511, 513, 515, 517, 
	519, 521, 524, 526, 528, 530, 532, 534, 
	536, 538, 540, 542, 544, 546, 548, 550, 
	552, 554, 556, 558, 560, 562, 564, 566, 
	568, 569, 570, 571, 572, 573, 574, 575, 
	576, 577, 578, 579, 580, 581, 582, 583, 
	594, 596, 598, 600, 602, 604, 606, 608, 
	610, 612, 614, 616, 618, 620, 622, 624, 
	626, 628, 630, 632, 634, 636, 638, 640, 
	642, 645, 647, 649, 651, 653, 655, 657, 
	659, 661, 663, 665, 667, 669, 671, 673, 
	675, 677, 679, 681, 683, 685, 687, 689, 
	691, 693, 695, 697, 699, 701, 703, 705, 
	707, 709, 711, 713, 715, 717, 719, 721, 
	723, 725, 727, 729, 731, 733, 735, 737, 
	739, 740, 741, 742, 743, 745, 746, 747, 
	748, 749, 750, 751, 752, 753, 754, 755, 
	756, 772, 774, 776, 778, 780, 782, 784, 
	786, 788, 790, 792, 794, 796, 798, 800, 
	802, 804, 806, 808, 810, 813, 815, 817, 
	819, 821, 823, 825, 827, 829, 831, 833, 
	835, 838, 840, 842, 844, 846, 848, 850, 
	852, 854, 856, 858, 860, 862, 864, 866, 
	868, 870, 872, 874, 876, 878, 880, 882, 
	884, 886, 888, 890, 893, 895, 897, 899, 
	901, 903, 905, 907, 909, 911, 913, 915, 
	917, 919, 921, 923, 925, 927, 929, 931, 
	933, 935, 936, 937, 938, 939, 943, 949, 
	952, 954, 960, 979, 980, 981
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	73, 74, 77, 79, 80, 83, 87, 90, 
	124, 239, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 73, 74, 77, 79, 
	80, 83, 87, 90, 124, 9, 13, 34, 
	34, 10, 13, 10, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 13, 10, 13, 13, 
	32, 64, 9, 10, 9, 10, 13, 32, 
	64, 11, 12, 10, 32, 64, 9, 13, 
	108, 101, 101, -59, -101, -68, 108, 105, 
	101, 97, 106, -60, -123, 99, 114, 97, 
	122, 114, 122, 121, 107, -59, -126, 97, 
	100, 121, 58, 10, 10, 10, 32, 35, 
	87, 124, 9, 13, -59, 10, -126, 10, 
	10, 97, -59, 10, -101, 10, 10, 99, 
	10, 105, 10, 119, 10, 111, -59, 10, 
	-101, 10, -60, 10, -121, 10, 10, 58, 
	10, 32, 34, 35, 37, 42, 64, 65, 
	73, 74, 77, 79, 80, 83, 87, 90, 
	124, 9, 13, 99, 122, 101, 110, 97, 
	114, 105, 117, 115, 122, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 73, 
	74, 77, 79, 83, 87, 90, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 108, 
	10, 101, 10, 101, -59, 10, -101, -68, 
	10, 10, 108, 10, 105, 10, 101, 10, 
	97, 10, 106, -60, 10, -123, 10, 10, 
	99, 10, 114, 10, 97, 10, 122, 10, 
	99, 122, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 117, 10, 115, 
	10, 122, 10, 58, 10, 97, 10, 98, 
	10, 108, 10, 111, 10, 110, 10, 32, 
	10, 115, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 115, 10, 122, 10, 97, -59, 10, 
	116, -126, 10, 10, 97, -59, 10, -101, 
	10, 10, 99, 10, 105, 10, 119, 10, 
	111, -59, 10, -101, 10, -60, 10, -121, 
	10, 10, 101, 10, 100, 10, 121, 10, 
	97, -59, 10, 107, -126, 10, 10, 111, 
	-59, 10, -68, 10, 10, 101, 10, 110, 
	10, 105, -59, 10, -126, 10, 10, 97, 
	10, 100, 97, 98, 108, 111, 110, 32, 
	115, 99, 101, 110, 97, 114, 105, 117, 
	115, 122, 97, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 73, 74, 77, 
	79, 83, 87, 90, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 108, 10, 101, 
	10, 101, -59, 10, -101, -68, 10, 10, 
	108, 10, 105, 10, 101, 10, 97, 10, 
	106, -60, 10, -123, 10, 10, 99, 10, 
	114, 10, 97, 10, 122, 10, 99, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 117, 10, 115, 10, 122, 10, 
	58, -59, 10, 116, -126, 10, 10, 97, 
	-59, 10, -101, 10, 10, 99, 10, 105, 
	10, 119, 10, 111, -59, 10, -101, 10, 
	-60, 10, -121, 10, 10, 101, 10, 100, 
	10, 121, 10, 97, 10, 107, -59, 10, 
	-126, 10, 10, 97, 10, 100, -59, 116, 
	-126, 97, -59, -101, 99, 105, 119, 111, 
	-59, -101, -60, -121, 58, 10, 10, 10, 
	32, 35, 37, 64, 80, 83, 87, 90, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 114, 
	10, 122, 10, 121, 10, 107, -59, 10, 
	-126, 10, 10, 97, 10, 100, 10, 121, 
	10, 58, 10, 99, 122, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	117, 10, 115, 10, 122, 10, 97, 10, 
	98, 10, 108, 10, 111, 10, 110, 10, 
	32, 10, 115, 10, 99, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	117, 10, 115, 10, 122, 10, 97, -59, 
	10, -126, 10, 10, 97, -59, 10, -101, 
	10, 10, 99, 10, 105, 10, 119, 10, 
	111, -59, 10, -101, 10, -60, 10, -121, 
	10, 10, 97, -59, 10, -126, 10, 10, 
	111, -59, 10, -68, 10, 10, 101, 10, 
	110, 10, 105, 101, 100, 121, 97, -59, 
	107, -126, 111, -59, -68, 101, 110, 105, 
	97, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 73, 74, 77, 79, 83, 
	87, 90, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 108, 10, 101, 10, 101, 
	-59, 10, -101, -68, 10, 10, 108, 10, 
	105, 10, 101, 10, 97, 10, 106, -60, 
	10, -123, 10, 10, 99, 10, 114, 10, 
	97, 10, 122, 10, 99, 122, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 117, 10, 115, 10, 122, 10, 58, 
	10, 97, 10, 98, 10, 108, 10, 111, 
	10, 110, 10, 32, 10, 115, 10, 99, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 117, 10, 115, 10, 122, 
	10, 97, -59, 10, 116, -126, 10, 10, 
	97, -59, 10, -101, 10, 10, 99, 10, 
	105, 10, 119, 10, 111, -59, 10, -101, 
	10, -60, 10, -121, 10, 10, 101, 10, 
	100, 10, 121, 10, 97, 10, 107, -59, 
	10, -126, 10, 10, 97, 10, 100, -59, 
	-126, 97, 100, 32, 124, 9, 13, 10, 
	32, 92, 124, 9, 13, 10, 92, 124, 
	10, 92, 10, 32, 92, 124, 9, 13, 
	10, 32, 34, 35, 37, 42, 64, 65, 
	73, 74, 77, 79, 80, 83, 87, 90, 
	124, 9, 13, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 18, 17, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 5, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 17, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 14, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	14, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 2, 4, 3, 
	2, 4, 17, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 20, 39, 41, 43, 46, 49, 
	54, 59, 64, 69, 73, 77, 80, 82, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 115, 
	118, 123, 130, 135, 137, 139, 141, 143, 
	146, 148, 150, 152, 154, 156, 158, 160, 
	162, 164, 166, 168, 170, 172, 174, 176, 
	178, 180, 182, 184, 186, 188, 190, 192, 
	199, 202, 205, 208, 211, 214, 217, 220, 
	223, 226, 229, 232, 235, 238, 241, 260, 
	263, 265, 267, 269, 271, 273, 275, 277, 
	279, 281, 283, 285, 301, 304, 307, 310, 
	313, 316, 319, 322, 325, 328, 331, 334, 
	337, 340, 343, 346, 349, 352, 355, 358, 
	362, 365, 368, 371, 374, 377, 380, 383, 
	386, 389, 392, 395, 399, 402, 405, 408, 
	411, 414, 417, 420, 423, 426, 429, 432, 
	435, 438, 441, 444, 447, 450, 453, 456, 
	459, 462, 465, 468, 471, 474, 477, 481, 
	484, 487, 490, 493, 496, 499, 502, 505, 
	508, 511, 514, 517, 520, 523, 526, 529, 
	533, 536, 539, 542, 545, 548, 551, 554, 
	557, 560, 563, 566, 568, 570, 572, 574, 
	576, 578, 580, 582, 584, 586, 588, 590, 
	592, 594, 596, 598, 600, 602, 604, 606, 
	622, 625, 628, 631, 634, 637, 640, 643, 
	646, 649, 652, 655, 658, 661, 664, 667, 
	670, 673, 676, 679, 683, 686, 689, 692, 
	695, 698, 701, 704, 707, 710, 713, 716, 
	719, 722, 725, 728, 731, 734, 737, 740, 
	743, 746, 750, 753, 756, 759, 762, 765, 
	768, 771, 774, 777, 780, 783, 786, 789, 
	792, 795, 798, 801, 804, 807, 810, 813, 
	816, 818, 820, 822, 824, 826, 828, 830, 
	832, 834, 836, 838, 840, 842, 844, 846, 
	857, 860, 863, 866, 869, 872, 875, 878, 
	881, 884, 887, 890, 893, 896, 899, 902, 
	905, 908, 911, 914, 917, 920, 923, 926, 
	929, 933, 936, 939, 942, 945, 948, 951, 
	954, 957, 960, 963, 966, 969, 972, 975, 
	978, 981, 984, 987, 990, 993, 996, 999, 
	1002, 1005, 1008, 1011, 1014, 1017, 1020, 1023, 
	1026, 1029, 1032, 1035, 1038, 1041, 1044, 1047, 
	1050, 1053, 1056, 1059, 1062, 1065, 1068, 1071, 
	1074, 1076, 1078, 1080, 1082, 1085, 1087, 1089, 
	1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 
	1107, 1123, 1126, 1129, 1132, 1135, 1138, 1141, 
	1144, 1147, 1150, 1153, 1156, 1159, 1162, 1165, 
	1168, 1171, 1174, 1177, 1180, 1184, 1187, 1190, 
	1193, 1196, 1199, 1202, 1205, 1208, 1211, 1214, 
	1217, 1221, 1224, 1227, 1230, 1233, 1236, 1239, 
	1242, 1245, 1248, 1251, 1254, 1257, 1260, 1263, 
	1266, 1269, 1272, 1275, 1278, 1281, 1284, 1287, 
	1290, 1293, 1296, 1299, 1303, 1306, 1309, 1312, 
	1315, 1318, 1321, 1324, 1327, 1330, 1333, 1336, 
	1339, 1342, 1345, 1348, 1351, 1354, 1357, 1360, 
	1363, 1366, 1368, 1370, 1372, 1374, 1378, 1384, 
	1388, 1391, 1397, 1416, 1418, 1420
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	6, 9, 10, 11, 12, 13, 14, 15, 
	16, 17, 1, 0, 2, 1, 3, 4, 
	5, 6, 7, 8, 6, 9, 10, 11, 
	12, 13, 14, 15, 16, 1, 0, 18, 
	0, 19, 0, 21, 22, 20, 24, 25, 
	23, 28, 27, 29, 27, 26, 32, 31, 
	33, 31, 30, 32, 31, 34, 31, 30, 
	32, 31, 35, 31, 30, 37, 36, 36, 
	0, 2, 38, 38, 0, 40, 41, 39, 
	2, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 56, 0, 
	58, 59, 57, 61, 62, 60, 0, 0, 
	0, 0, 63, 64, 65, 64, 64, 67, 
	66, 63, 2, 68, 7, 68, 0, 69, 
	0, 70, 0, 71, 0, 72, 0, 73, 
	74, 0, 75, 0, 70, 0, 73, 0, 
	76, 0, 77, 0, 78, 0, 79, 0, 
	70, 0, 80, 0, 81, 0, 70, 0, 
	82, 0, 83, 0, 84, 0, 85, 0, 
	86, 0, 87, 0, 88, 0, 89, 0, 
	90, 0, 91, 0, 93, 92, 95, 94, 
	95, 96, 97, 98, 97, 96, 94, 99, 
	95, 94, 100, 95, 94, 95, 101, 94, 
	102, 95, 94, 103, 95, 94, 95, 104, 
	94, 95, 105, 94, 95, 106, 94, 95, 
	107, 94, 108, 95, 94, 109, 95, 94, 
	110, 95, 94, 111, 95, 94, 95, 112, 
	94, 114, 113, 115, 116, 117, 118, 119, 
	120, 118, 121, 122, 123, 124, 125, 126, 
	127, 128, 113, 0, 129, 130, 0, 131, 
	0, 132, 0, 133, 0, 134, 0, 135, 
	0, 136, 0, 137, 0, 138, 0, 139, 
	0, 141, 140, 143, 142, 143, 144, 145, 
	146, 147, 145, 148, 147, 149, 150, 151, 
	152, 153, 154, 144, 142, 143, 155, 142, 
	143, 156, 142, 143, 157, 142, 143, 158, 
	142, 143, 159, 142, 143, 160, 142, 143, 
	161, 142, 143, 162, 142, 143, 163, 142, 
	143, 164, 142, 143, 165, 142, 143, 166, 
	142, 143, 167, 142, 143, 168, 142, 143, 
	169, 142, 143, 170, 142, 143, 171, 142, 
	143, 172, 142, 173, 143, 142, 174, 175, 
	143, 142, 143, 176, 142, 143, 171, 142, 
	143, 174, 142, 143, 177, 142, 143, 178, 
	142, 179, 143, 142, 180, 143, 142, 143, 
	171, 142, 143, 181, 142, 143, 182, 142, 
	143, 171, 142, 143, 183, 184, 142, 143, 
	185, 142, 143, 186, 142, 143, 187, 142, 
	143, 188, 142, 143, 189, 142, 143, 190, 
	142, 143, 191, 142, 143, 192, 142, 143, 
	169, 142, 143, 193, 142, 143, 194, 142, 
	143, 195, 142, 143, 196, 142, 143, 197, 
	142, 143, 198, 142, 143, 199, 142, 143, 
	200, 142, 143, 201, 142, 143, 202, 142, 
	143, 203, 142, 143, 204, 142, 143, 205, 
	142, 143, 206, 142, 143, 207, 142, 143, 
	208, 142, 143, 192, 142, 209, 143, 210, 
	142, 211, 143, 142, 143, 212, 142, 213, 
	143, 142, 214, 143, 142, 143, 215, 142, 
	143, 216, 142, 143, 217, 142, 143, 218, 
	142, 219, 143, 142, 220, 143, 142, 221, 
	143, 142, 192, 143, 142, 143, 222, 142, 
	143, 223, 142, 143, 171, 142, 143, 224, 
	142, 225, 143, 226, 142, 227, 143, 142, 
	143, 228, 142, 229, 143, 142, 230, 143, 
	142, 143, 231, 142, 143, 232, 142, 143, 
	208, 142, 233, 143, 142, 234, 143, 142, 
	143, 235, 142, 143, 236, 142, 237, 0, 
	238, 0, 239, 0, 240, 0, 241, 0, 
	242, 0, 243, 0, 244, 0, 245, 0, 
	246, 0, 247, 0, 248, 0, 249, 0, 
	250, 0, 251, 0, 252, 0, 253, 0, 
	254, 0, 256, 255, 258, 257, 258, 259, 
	260, 261, 262, 260, 263, 262, 264, 265, 
	266, 267, 268, 269, 259, 257, 258, 270, 
	257, 258, 271, 257, 258, 272, 257, 258, 
	273, 257, 258, 274, 257, 258, 275, 257, 
	258, 276, 257, 258, 277, 257, 258, 278, 
	257, 258, 279, 257, 258, 280, 257, 258, 
	281, 257, 258, 282, 257, 258, 283, 257, 
	258, 284, 257, 258, 285, 257, 258, 286, 
	257, 258, 287, 257, 288, 258, 257, 289, 
	290, 258, 257, 258, 291, 257, 258, 286, 
	257, 258, 289, 257, 258, 292, 257, 258, 
	293, 257, 294, 258, 257, 295, 258, 257, 
	258, 286, 257, 258, 296, 257, 258, 297, 
	257, 258, 286, 257, 258, 298, 257, 258, 
	299, 257, 258, 300, 257, 258, 301, 257, 
	258, 302, 257, 258, 303, 257, 258, 304, 
	257, 258, 305, 257, 258, 306, 257, 258, 
	284, 257, 307, 258, 308, 257, 309, 258, 
	257, 258, 310, 257, 311, 258, 257, 312, 
	258, 257, 258, 313, 257, 258, 314, 257, 
	258, 315, 257, 258, 316, 257, 317, 258, 
	257, 318, 258, 257, 319, 258, 257, 306, 
	258, 257, 258, 320, 257, 258, 321, 257, 
	258, 286, 257, 258, 322, 257, 258, 323, 
	257, 324, 258, 257, 325, 258, 257, 258, 
	326, 257, 258, 327, 257, 328, 329, 0, 
	330, 0, 331, 0, 332, 0, 333, 0, 
	334, 0, 335, 0, 336, 0, 337, 0, 
	338, 0, 339, 0, 340, 0, 341, 0, 
	342, 0, 344, 343, 346, 345, 346, 347, 
	348, 349, 348, 350, 351, 352, 353, 347, 
	345, 346, 354, 345, 346, 355, 345, 346, 
	356, 345, 346, 357, 345, 346, 358, 345, 
	346, 359, 345, 346, 360, 345, 346, 361, 
	345, 346, 362, 345, 346, 363, 345, 346, 
	364, 345, 346, 365, 345, 346, 366, 345, 
	346, 367, 345, 346, 368, 345, 346, 369, 
	345, 346, 370, 345, 346, 371, 345, 372, 
	346, 345, 373, 346, 345, 346, 374, 345, 
	346, 375, 345, 346, 376, 345, 346, 377, 
	345, 346, 378, 379, 345, 346, 380, 345, 
	346, 381, 345, 346, 382, 345, 346, 383, 
	345, 346, 384, 345, 346, 385, 345, 346, 
	386, 345, 346, 376, 345, 346, 387, 345, 
	346, 388, 345, 346, 389, 345, 346, 390, 
	345, 346, 391, 345, 346, 392, 345, 346, 
	393, 345, 346, 394, 345, 346, 395, 345, 
	346, 396, 345, 346, 397, 345, 346, 398, 
	345, 346, 399, 345, 346, 400, 345, 346, 
	401, 345, 346, 402, 345, 346, 376, 345, 
	403, 346, 345, 404, 346, 345, 346, 405, 
	345, 406, 346, 345, 407, 346, 345, 346, 
	408, 345, 346, 409, 345, 346, 410, 345, 
	346, 411, 345, 412, 346, 345, 413, 346, 
	345, 414, 346, 345, 376, 346, 345, 346, 
	415, 345, 416, 346, 345, 417, 346, 345, 
	346, 418, 345, 419, 346, 345, 420, 346, 
	345, 346, 421, 345, 346, 422, 345, 346, 
	402, 345, 423, 0, 424, 0, 70, 0, 
	425, 0, 426, 427, 0, 428, 0, 429, 
	0, 430, 0, 431, 0, 432, 0, 433, 
	0, 434, 0, 435, 0, 436, 0, 438, 
	437, 440, 439, 440, 441, 442, 443, 444, 
	442, 445, 444, 446, 447, 448, 449, 450, 
	451, 441, 439, 440, 452, 439, 440, 453, 
	439, 440, 454, 439, 440, 455, 439, 440, 
	456, 439, 440, 457, 439, 440, 458, 439, 
	440, 459, 439, 440, 460, 439, 440, 461, 
	439, 440, 462, 439, 440, 463, 439, 440, 
	464, 439, 440, 465, 439, 440, 466, 439, 
	440, 467, 439, 440, 468, 439, 440, 469, 
	439, 470, 440, 439, 471, 472, 440, 439, 
	440, 473, 439, 440, 468, 439, 440, 471, 
	439, 440, 474, 439, 440, 475, 439, 476, 
	440, 439, 477, 440, 439, 440, 468, 439, 
	440, 478, 439, 440, 479, 439, 440, 468, 
	439, 440, 480, 481, 439, 440, 482, 439, 
	440, 483, 439, 440, 484, 439, 440, 485, 
	439, 440, 486, 439, 440, 487, 439, 440, 
	488, 439, 440, 489, 439, 440, 466, 439, 
	440, 490, 439, 440, 491, 439, 440, 492, 
	439, 440, 493, 439, 440, 494, 439, 440, 
	495, 439, 440, 496, 439, 440, 497, 439, 
	440, 498, 439, 440, 499, 439, 440, 500, 
	439, 440, 501, 439, 440, 502, 439, 440, 
	503, 439, 440, 504, 439, 440, 505, 439, 
	440, 489, 439, 506, 440, 507, 439, 508, 
	440, 439, 440, 509, 439, 510, 440, 439, 
	511, 440, 439, 440, 512, 439, 440, 513, 
	439, 440, 514, 439, 440, 515, 439, 516, 
	440, 439, 517, 440, 439, 518, 440, 439, 
	489, 440, 439, 440, 519, 439, 440, 520, 
	439, 440, 468, 439, 440, 521, 439, 440, 
	522, 439, 523, 440, 439, 524, 440, 439, 
	440, 525, 439, 440, 526, 439, 527, 0, 
	528, 0, 529, 0, 530, 0, 531, 532, 
	531, 0, 535, 534, 536, 537, 534, 533, 
	0, 539, 540, 538, 0, 539, 538, 535, 
	541, 539, 540, 541, 538, 535, 542, 543, 
	544, 545, 546, 547, 548, 546, 549, 550, 
	551, 552, 553, 554, 555, 556, 542, 0, 
	557, 0, 1, 0, 558, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 37, 43, 48, 51, 79, 263, 355, 
	453, 459, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 461, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 29, 38, 
	39, 40, 42, 41, 44, 45, 46, 47, 
	49, 50, 52, 53, 54, 55, 56, 57, 
	58, 59, 60, 61, 62, 63, 62, 63, 
	63, 2, 64, 65, 66, 67, 68, 69, 
	70, 71, 72, 73, 74, 75, 76, 77, 
	78, 2, 2, 3, 13, 15, 29, 32, 
	35, 37, 43, 48, 51, 79, 263, 355, 
	453, 80, 179, 81, 82, 83, 84, 85, 
	86, 87, 88, 89, 90, 91, 90, 91, 
	91, 2, 92, 106, 107, 109, 115, 120, 
	123, 150, 166, 93, 94, 95, 96, 97, 
	98, 99, 100, 101, 102, 103, 104, 105, 
	2, 78, 108, 106, 110, 111, 112, 114, 
	113, 116, 117, 118, 119, 121, 122, 124, 
	133, 125, 126, 127, 128, 129, 130, 131, 
	132, 134, 135, 136, 137, 138, 139, 140, 
	141, 142, 143, 144, 145, 146, 147, 148, 
	149, 151, 163, 152, 153, 154, 155, 156, 
	157, 158, 159, 160, 161, 162, 164, 165, 
	167, 168, 175, 169, 170, 171, 172, 173, 
	174, 176, 177, 178, 115, 180, 181, 182, 
	183, 184, 185, 186, 187, 188, 189, 190, 
	191, 192, 193, 194, 195, 196, 197, 198, 
	199, 198, 199, 199, 2, 200, 214, 215, 
	217, 223, 228, 231, 241, 257, 201, 202, 
	203, 204, 205, 206, 207, 208, 209, 210, 
	211, 212, 213, 2, 78, 216, 214, 218, 
	219, 220, 222, 221, 224, 225, 226, 227, 
	229, 230, 232, 233, 234, 235, 236, 237, 
	238, 239, 240, 242, 254, 243, 244, 245, 
	246, 247, 248, 249, 250, 251, 252, 253, 
	255, 256, 258, 259, 260, 261, 262, 223, 
	264, 352, 265, 266, 267, 268, 269, 270, 
	271, 272, 273, 274, 275, 276, 277, 278, 
	279, 278, 279, 279, 2, 280, 294, 304, 
	330, 343, 281, 282, 283, 284, 285, 286, 
	287, 288, 289, 290, 291, 292, 293, 2, 
	295, 296, 297, 298, 299, 300, 301, 302, 
	303, 78, 305, 313, 306, 307, 308, 309, 
	310, 311, 312, 314, 315, 316, 317, 318, 
	319, 320, 321, 322, 323, 324, 325, 326, 
	327, 328, 329, 331, 332, 333, 334, 335, 
	336, 337, 338, 339, 340, 341, 342, 344, 
	345, 346, 347, 348, 349, 350, 351, 353, 
	354, 356, 357, 449, 358, 359, 360, 361, 
	362, 363, 364, 365, 366, 367, 368, 367, 
	368, 368, 2, 369, 383, 384, 386, 392, 
	397, 400, 427, 443, 370, 371, 372, 373, 
	374, 375, 376, 377, 378, 379, 380, 381, 
	382, 2, 78, 385, 383, 387, 388, 389, 
	391, 390, 393, 394, 395, 396, 398, 399, 
	401, 410, 402, 403, 404, 405, 406, 407, 
	408, 409, 411, 412, 413, 414, 415, 416, 
	417, 418, 419, 420, 421, 422, 423, 424, 
	425, 426, 428, 440, 429, 430, 431, 432, 
	433, 434, 435, 436, 437, 438, 439, 441, 
	442, 444, 445, 446, 447, 448, 392, 450, 
	451, 452, 43, 453, 454, 455, 457, 458, 
	456, 454, 455, 456, 454, 457, 458, 3, 
	13, 15, 29, 32, 35, 37, 43, 48, 
	51, 79, 263, 355, 453, 460, 0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 81, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	21, 31, 130, 60, 57, 31, 63, 57, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	66, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 78, 33, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 19, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 69, 33, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 72, 33, 84, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 37, 37, 54, 
	37, 87, 0, 0, 39, 0, 0, 93, 
	90, 41, 96, 90, 96, 96, 96, 96, 
	96, 96, 96, 96, 99, 0, 0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
];

const lexer_start = 1;
const lexer_first_final = 461;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

/* line 130 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

/* line 131 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 836 "js/lib/gherkin/lexer/pl.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */
  
/* line 843 "js/lib/gherkin/lexer/pl.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1070 "js/lib/gherkin/lexer/pl.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1109 "js/lib/gherkin/lexer/pl.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/pl.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/pl', [], function() {
      return Lexer
    });
  } else {
    define('gherkin/lexer/pl', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();
