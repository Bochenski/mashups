// Generated by CoffeeScript 1.3.3
var ABOUT_BLANK, Entry, HTML, History, JSDOM, Location, Scripts, URL, util;

util = require("util");

JSDOM = require("jsdom");

HTML = JSDOM.dom.level3.html;

Scripts = require("./scripts");

URL = require("url");

ABOUT_BLANK = URL.parse("about:blank");

Entry = (function() {

  function Entry(url, options) {
    if (options) {
      this.state = options.state;
      this.title = options.title;
      this.pop = !!options.pop;
    }
    this.update(url);
  }

  Entry.prototype.update = function(url) {
    if (/^file:/i.test(url)) {
      return this.url = {
        protocol: "file:",
        hostname: "",
        pathname: url.slice(6),
        href: url
      };
    } else {
      return this.url = URL.parse(URL.format(url));
    }
  };

  return Entry;

})();

History = (function() {

  function History(window) {
    var _this = this;
    this._use(window);
    this._stack = [];
    this._index = 0;
    this._location = new Location(this);
    Object.defineProperty(this, "current", {
      get: function() {
        var _ref;
        return ((_ref = _this._stack[_this._index]) != null ? _ref.url : void 0) || ABOUT_BLANK;
      }
    });
  }

  History.prototype._use = function(window) {
    var _this = this;
    this._window = window;
    this._browser = this._window.browser;
    return Object.defineProperty(this._window, "location", {
      get: function() {
        return _this._location;
      },
      set: function(url) {
        return _this._assign(_this._resolve(url));
      }
    });
  };

  History.prototype._pageChanged = function(was) {
    var evt, url, _ref;
    url = (_ref = this._stack[this._index]) != null ? _ref.url : void 0;
    if (!was || was.host !== url.host || was.pathname !== url.pathname || was.query !== url.query) {
      return this._resource(url);
    } else if (was.hash !== url.hash) {
      evt = this._window.document.createEvent("HTMLEvents");
      evt.initEvent("hashchange", true, false);
      return this._browser.dispatchEvent(this._window, evt);
    } else {
      return this._resource(url);
    }
  };

  History.prototype._resource = function(url, method, data, headers) {
    var referer, _ref, _ref1,
      _this = this;
    switch (url.protocol) {
      case "about:":
        this._createDocument(this._window, ABOUT_BLANK);
        this._stack[this._index].update(url);
        return this._browser.emit("loaded", this._browser);
      case "javascript:":
        this._createDocument(this._window, ABOUT_BLANK);
        if (!this._stack[this._index]) {
          this._stack[this._index].update(ABOUT_BLANK);
        }
        try {
          this._window._evaluate(url.pathname, "javascript:");
          return this._browser.emit("loaded", this._browser);
        } catch (error) {
          return this._browser.emit("error", error);
        }
        break;
      case "http:":
      case "https:":
      case "file:":
        headers = headers ? JSON.parse(JSON.stringify(headers)) : {};
        referer = ((_ref = this._stack[this._index - 1]) != null ? (_ref1 = _ref.url) != null ? _ref1.href : void 0 : void 0) || this._browser.referer;
        if (referer) {
          headers["referer"] = referer;
        }
        method = (method || "GET").toUpperCase();
        return this._browser.resources.request(method, url, data, headers, function(error, response) {
          var document, evt;
          if (error) {
            document = _this._createDocument(_this._window, url);
            document.open();
            document.write(error.message);
            document.close();
            return _this._browser.emit("error", error);
          } else {
            document = _this._createDocument(_this._window, response.url);
            _this._browser.response = [response.statusCode, response.headers, response.body];
            url = URL.parse(response.url);
            _this._stack[_this._index].update(url);
            if (response.body) {
              document.open();
              document.write(response.body);
              document.close();
            }
            if (url.hash) {
              evt = _this._window.document.createEvent("HTMLEvents");
              evt.initEvent("hashchange", true, false);
              _this._browser.dispatchEvent(_this._window, evt);
            }
            if (response.statusCode >= 400) {
              return _this._browser.emit("error", new Error("Server returned status code " + response.statusCode));
            } else if (document.documentElement) {
              return _this._browser.emit("loaded", _this._browser);
            } else {
              return _this._browser.emit("error", new Error("Could not parse document at " + (URL.format(url))));
            }
          }
        });
      default:
        throw new Error("Cannot load resource: " + (URL.format(url)));
    }
  };

  History.prototype._createDocument = function(window, url) {
    var document, jsdom_opts,
      _this = this;
    jsdom_opts = {
      deferClose: true,
      features: {
        MutationEvents: "2.0",
        ProcessExternalResources: [],
        FetchExternalResources: ["iframe"]
      },
      parser: this._browser.htmlParser,
      url: URL.format(url)
    };
    if (this._browser.runScripts) {
      jsdom_opts.features.ProcessExternalResources.push("script");
      jsdom_opts.features.FetchExternalResources.push("script");
    }
    if (this._browser.loadCSS) {
      jsdom_opts.features.FetchExternalResources.push("css");
    }
    document = JSDOM.jsdom(null, HTML, jsdom_opts);
    if (this._browser.runScripts) {
      Scripts.addInlineScriptSupport(document);
    }
    window.document = document;
    document.window = document.parentWindow = window;
    window.navigator.userAgent = this._browser.userAgent;
    document.addEventListener("DOMContentLoaded", function(event) {
      var onload;
      onload = document.createEvent("HTMLEvents");
      onload.initEvent("load", false, false);
      return window.dispatchEvent(onload);
    });
    return document;
  };

  History.prototype.forward = function() {
    return this.go(1);
  };

  History.prototype.back = function() {
    return this.go(-1);
  };

  History.prototype.go = function(amount) {
    var entry, new_index, popstate, was, _ref, _ref1, _ref2;
    was = (_ref = this._stack[this._index]) != null ? _ref.url : void 0;
    new_index = this._index + amount;
    if (new_index < 0) {
      new_index = 0;
    }
    if (this._stack.length > 0 && new_index >= this._stack.length) {
      new_index = this._stack.length - 1;
    }
    if (new_index !== this._index && (entry = this._stack[new_index])) {
      this._index = new_index;
      if (entry.pop) {
        if (was.host !== ((_ref1 = this._stack[this._index]) != null ? (_ref2 = _ref1.url) != null ? _ref2.host : void 0 : void 0)) {
          this._resource(this._stack[this._index].url);
        } else {
          popstate = this._window.document.createEvent("HTMLEvents");
          popstate.initEvent("popstate", false, false);
          popstate.state = entry.state;
          this._browser.dispatchEvent(this._window, popstate);
        }
      } else {
        this._pageChanged(was);
      }
    }
  };

  History.prototype.__defineGetter__("length", function() {
    return this._stack.length;
  });

  History.prototype.pushState = function(state, title, url) {
    url = this._resolve(url);
    this._advance();
    return this._stack[this._index] = new Entry(url, {
      state: state,
      title: title,
      pop: true
    });
  };

  History.prototype.replaceState = function(state, title, url) {
    if (this._index < 0) {
      this._index = 0;
    }
    url = this._resolve(url);
    return this._stack[this._index] = new Entry(url, {
      state: state,
      title: title,
      pop: true
    });
  };

  History.prototype._resolve = function(url) {
    var _ref, _ref1;
    if (url) {
      if (/^\w+:/i.test(url)) {
        return url;
      } else {
        return URL.resolve((_ref = this._stack[this._index]) != null ? _ref.url : void 0, url);
      }
    } else {
      return (_ref1 = this._stack[this._index]) != null ? _ref1.url : void 0;
    }
  };

  History.prototype._assign = function(url) {
    var was, _ref;
    url = this._resolve(url);
    was = (_ref = this._stack[this._index]) != null ? _ref.url : void 0;
    this._stack = this._stack.slice(0, this._index + 1 || 9e9);
    this._advance();
    this._stack[this._index] = new Entry(url);
    return this._pageChanged(was);
  };

  History.prototype._replace = function(url) {
    var was, _ref;
    url = this._resolve(url);
    was = (_ref = this._stack[this._index]) != null ? _ref.url : void 0;
    if (this._index < 0) {
      this._index = 0;
    }
    this._stack[this._index] = new Entry(url);
    return this._pageChanged(was);
  };

  History.prototype._loadPage = function(force) {
    if (this._stack[this._index]) {
      return this._resource(this._stack[this._index].url);
    }
  };

  History.prototype._submit = function(url, method, data, enctype) {
    var headers;
    headers = {
      "content-type": enctype || "application/x-www-form-urlencoded"
    };
    this._stack = this._stack.slice(0, this._index + 1 || 9e9);
    url = this._resolve(url);
    this._advance();
    this._stack[this._index] = new Entry(url);
    return this._resource(this._stack[this._index].url, method, data, headers);
  };

  History.prototype.dump = function() {
    var dump, entry, i, line, _ref;
    dump = [];
    _ref = this._stack;
    for (i in _ref) {
      entry = _ref[i];
      i = Number(i);
      line = i === this._index ? "" + (i + 1) + ": " : "" + (i + 1) + ". ";
      line += URL.format(entry.url);
      if (entry.state) {
        line += " state: " + util.inspect(entry.state);
      }
      dump.push(line);
    }
    return dump;
  };

  History.prototype.save = function() {
    var entry, i, line, serialized, _ref;
    serialized = [];
    _ref = this._stack;
    for (i in _ref) {
      entry = _ref[i];
      line = URL.format(entry.url);
      if (entry.pop) {
        line += " " + (JSON.stringify(entry.state));
      }
      serialized.push(line);
    }
    return serialized.join("\n") + "\n";
  };

  History.prototype.load = function(serialized) {
    var line, options, state, url, _i, _len, _ref, _ref1, _results;
    _ref = serialized.split(/\n+/);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      line = _ref[_i];
      line = line.trim();
      if (line[0] === "#" || line === "") {
        continue;
      }
      _ref1 = line.split(/\s/), url = _ref1[0], state = _ref1[1];
      options = state && {
        state: JSON.parse(state),
        title: null,
        pop: true
      };
      this._advance();
      _results.push(this._stack[this._index] = new Entry(url, state));
    }
    return _results;
  };

  History.prototype._advance = function() {
    var current;
    current = this._stack[this._index];
    if (current && ~["http:", "https:", "file:"].indexOf(current.url.protocol)) {
      return ++this._index;
    }
  };

  return History;

})();

Location = (function() {
  var prop, _fn, _i, _len, _ref,
    _this = this;

  function Location(_history) {
    this._history = _history;
  }

  Location.prototype.assign = function(newUrl) {
    return this._history._assign(newUrl);
  };

  Location.prototype.replace = function(newUrl) {
    return this._history._replace(newUrl);
  };

  Location.prototype.reload = function(force) {
    return this._history._loadPage(force);
  };

  Location.prototype.toString = function() {
    return URL.format(this._history.current);
  };

  Location.prototype.__defineGetter__("href", function() {
    var _ref;
    return (_ref = this._history.current) != null ? _ref.href : void 0;
  });

  Location.prototype.__defineSetter__("href", function(new_url) {
    return this._history._assign(new_url);
  });

  _ref = ["hash", "host", "hostname", "pathname", "port", "protocol", "search"];
  _fn = function(prop) {
    Location.prototype.__defineGetter__(prop, function() {
      var _ref1;
      return ((_ref1 = this._history.current) != null ? _ref1[prop] : void 0) || "";
    });
    return Location.prototype.__defineSetter__(prop, function(value) {
      var newUrl, _ref1;
      newUrl = URL.parse((_ref1 = this._history.current) != null ? _ref1.href : void 0);
      newUrl[prop] = value;
      return this._history._assign(URL.format(newUrl));
    });
  };
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    prop = _ref[_i];
    _fn(prop);
  }

  return Location;

}).call(this);

HTML.HTMLDocument.prototype.__defineGetter__("location", function() {
  return this.parentWindow.location;
});

HTML.HTMLDocument.prototype.__defineSetter__("location", function(url) {
  if (this._parentWindow) {
    return this.parentWindow.location = url;
  }
});

module.exports = History;
