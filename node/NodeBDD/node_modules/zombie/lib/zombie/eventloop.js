// Generated by CoffeeScript 1.3.3
var EventLoop, URL, ms, raise;

ms = require("ms");

URL = require("url");

raise = require("./scripts").raise;

EventLoop = (function() {

  function EventLoop(_browser) {
    this._browser = _browser;
    this._processing = 0;
    this._waiting = [];
    this._timers = [];
  }

  EventLoop.prototype.reset = function() {
    var timer, _i, _len, _ref;
    if (this._timers) {
      _ref = this._timers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        timer = _ref[_i];
        global.clearTimeout(timer.handle);
      }
    }
    return this._timers = [];
  };

  EventLoop.prototype.apply = function(window) {
    var remove,
      _this = this;
    remove = function(timer) {
      var index;
      index = _this._timers.indexOf(timer);
      if (~index) {
        return _this._timers.splice(index, 1);
      }
    };
    window.setTimeout = function(fn, delay) {
      var timer;
      if (!fn) {
        return;
      }
      timer = {
        handle: null,
        timeout: true,
        resume: function() {
          if (timer.handle) {
            return;
          }
          timer.next = Date.now() + Math.max(delay || 0, 0);
          if (delay <= 0) {
            remove(timer);
            return _this.perform(function(done) {
              return process.nextTick(function() {
                _this._browser.log("Firing timeout after " + delay + "ms delay");
                window._evaluate(fn);
                return done();
              });
            });
          } else {
            return timer.handle = global.setTimeout(function() {
              return _this.perform(function(done) {
                remove(timer);
                _this._browser.log("Firing timeout after " + delay + "ms delay");
                window._evaluate(fn);
                return done();
              });
            }, delay);
          }
        },
        pause: function() {
          global.clearTimeout(timer.handle);
          timer.handle = null;
          return delay = timer.next - Date.now();
        },
        stop: function() {
          global.clearTimeout(timer.handle);
          return remove(timer);
        }
      };
      _this._timers.push(timer);
      timer.resume();
      return timer;
    };
    window.setInterval = function(fn, interval) {
      var timer;
      if (interval == null) {
        interval = 0;
      }
      if (!fn) {
        return;
      }
      timer = {
        handle: null,
        interval: true,
        resume: function() {
          if (timer.handle) {
            return;
          }
          timer.next = Date.now() + interval;
          return timer.handle = global.setInterval(function() {
            return _this.perform(function(done) {
              timer.next = Date.now() + interval;
              _this._browser.log("Firing interval every " + interval + "ms");
              window._evaluate(fn);
              return done();
            });
          }, interval);
        },
        pause: function() {
          global.clearInterval(timer.handle);
          return timer.handle = null;
        },
        stop: function() {
          global.clearInterval(timer.handle);
          return remove(timer);
        }
      };
      _this._timers.push(timer);
      timer.resume();
      return timer;
    };
    window.clearTimeout = function(timer) {
      if (timer && timer.timeout && timer.stop) {
        return timer.stop();
      }
    };
    return window.clearInterval = function(timer) {
      if (timer && timer.interval && timer.stop) {
        return timer.stop();
      }
    };
  };

  EventLoop.prototype.perform = function(fn) {
    var _this = this;
    ++this._processing;
    fn(function() {
      --_this._processing;
      if (_this._processing === 0) {
        return _this._next();
      }
    });
  };

  EventLoop.prototype.dispatch = function(target, event) {
    var preventDefault;
    preventDefault = false;
    this.perform(function(done) {
      var window;
      if (target._evaluate) {
        window = target;
      } else {
        window = (target.ownerDocument || target.document).window;
      }
      window._evaluate(function() {
        return preventDefault = target.dispatchEvent(event);
      });
      return done();
    });
    return preventDefault;
  };

  EventLoop.prototype.wait = function(window, duration, callback) {
    var done, done_at, is_done, terminate, waiting,
      _this = this;
    if (typeof duration === "function") {
      is_done = duration;
      done_at = Infinity;
    } else {
      if (!(duration && duration !== 0)) {
        duration = this._browser.waitFor;
      }
      done_at = Date.now() + ms(duration || 0);
    }
    done = function(error) {
      var fn;
      done = null;
      _this._waiting = (function() {
        var _i, _len, _ref, _results;
        _ref = this._waiting;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          fn = _ref[_i];
          if (fn !== waiting) {
            _results.push(fn);
          }
        }
        return _results;
      }).call(_this);
      if (_this._waiting.length === 0) {
        _this._pause();
      }
      if (terminate) {
        clearTimeout(terminate);
      }
      if (callback) {
        process.nextTick(function() {
          return callback(error, window);
        });
      }
      if (error) {
        return _this._browser.emit("error", error);
      } else {
        return _this._browser.emit("done");
      }
    };
    terminate = setTimeout(done, ms(this._browser.maxWait));
    waiting = function() {
      var next, timer, timers;
      if (!done) {
        return;
      }
      if (_this._processing > 0) {
        return;
      }
      try {
        if (is_done && is_done(window)) {
          done();
          return;
        }
      } catch (error) {
        done(error);
        return;
      }
      timers = (function() {
        var _i, _len, _ref, _results;
        _ref = this._timers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          timer = _ref[_i];
          _results.push(timer.next);
        }
        return _results;
      }).call(_this);
      next = Math.min.apply(Math, timers);
      if (next > done_at) {
        return done();
      }
    };
    if (this._waiting.length === 0) {
      this._resume();
    }
    this._waiting.push(waiting);
    this._next();
  };

  EventLoop.prototype._next = function() {
    var waiting, _i, _len, _ref;
    _ref = this._waiting;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      waiting = _ref[_i];
      process.nextTick(waiting);
    }
  };

  EventLoop.prototype._pause = function() {
    var timer, _i, _len, _ref;
    _ref = this._timers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      timer = _ref[_i];
      timer.pause();
    }
  };

  EventLoop.prototype._resume = function() {
    var timer, _i, _len, _ref;
    _ref = this._timers.slice();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      timer = _ref[_i];
      timer.resume();
    }
  };

  EventLoop.prototype.dump = function() {
    return ["The time:   " + (new Date), "Timers:     " + this._timers.length, "Processing: " + this._processing, "Waiting:    " + this._waiting.length];
  };

  return EventLoop;

})();

module.exports = EventLoop;
