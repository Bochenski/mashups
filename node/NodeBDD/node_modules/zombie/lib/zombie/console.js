// Generated by CoffeeScript 1.3.3
var Console, Util;

Util = require("util");

Console = (function() {

  function Console(_silent) {
    this._silent = _silent;
  }

  Console.prototype.assert = console.assert.bind(console);

  Console.prototype.count = function(name) {
    var _base;
    this._counters || (this._counters = {});
    (_base = this._counters)[name] || (_base[name] = 0);
    this._counters[name]++;
    return this.log("" + name + ": " + this._counters[name]);
  };

  Console.prototype.debug = function() {
    return this.log.apply(this, arguments);
  };

  Console.prototype.error = function() {
    return this.log.apply(this, arguments);
  };

  Console.prototype.group = function() {};

  Console.prototype.groupCollapsed = function() {};

  Console.prototype.groupEnd = function() {};

  Console.prototype.info = function() {
    return this.log.apply(this, arguments);
  };

  Console.prototype.log = function() {
    var arg, formatted, output;
    formatted = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        arg = arguments[_i];
        _results.push(typeof arg === "string" ? arg : Util.inspect(arg, console.showHidden, console.depth));
      }
      return _results;
    }).apply(this, arguments);
    if (typeof Util.format === "function") {
      output = Util.format.apply(this, formatted) + "\n";
    } else {
      output = formatted.join(" ") + "\n";
    }
    this._output || (this._output = []);
    this._output.push(output);
    if (!this._silent) {
      return process.stdout.write(output);
    }
  };

  Console.prototype.warn = function() {
    return this.log.apply(this, arguments);
  };

  Console.prototype.time = function(name) {
    this._timers || (this._timers = {});
    return this._timers[name] = Date.now();
  };

  Console.prototype.timeEnd = function(name) {
    var start;
    if (!this._timers) {
      return;
    }
    start = this._timers[name];
    if (!start) {
      return;
    }
    delete this._timers[name];
    return this.log("" + name + ": " + (Date.now() - start) + "ms");
  };

  Console.prototype.trace = function() {
    var stack;
    stack = (new Error).stack.split("\n");
    stack[0] = "console.trace()";
    return this.log(stack.join("\n"));
  };

  Console.prototype.__defineGetter__("output", function() {
    return (this._output ? this._output.join("\n") : "");
  });

  return Console;

})();

module.exports = Console;
