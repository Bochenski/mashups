{
  "name": "bower",
  "description": "The browser package manager.",
  "version": "0.1.3",
  "author": {
    "name": "Twitter"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/twitter/bower/blob/master/LICENSE"
    }
  ],
  "main": "lib",
  "homepage": "http://twitter.github.com/bower",
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "tmp": "latest",
    "vows": "latest",
    "glob": "latest",
    "nopt": "latest",
    "archy": "latest",
    "async": "latest",
    "colors": "latest",
    "rimraf": "latest",
    "mkdirp": "latest",
    "semver": "latest",
    "request": "latest",
    "fstream": "latest",
    "hogan.js": "latest",
    "lodash": "latest",
    "read-package-json": "latest"
  },
  "scripts": {
    "test": "mocha -R spec -t 10000"
  },
  "devDependencies": {
    "mocha": "latest"
  },
  "bin": {
    "bower": "bin/bower"
  },
  "preferGlobal": true,
  "readme": "BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, URL or local path.\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n",
  "_id": "bower@0.1.3",
  "_from": "bower@~0.1.0"
}
